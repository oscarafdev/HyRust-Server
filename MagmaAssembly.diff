--- Vanilla\BasicWildLifeAI.cs	2014-06-18 23:47:03.523000000 +1000
+++ Magma\BasicWildLifeAI.cs	2014-06-19 00:24:41.586000000 +1000
@@ -1,5 +1,6 @@
 using Facepunch;
 using Facepunch.Procedural;
+using Magma;
 using System;
 using System.Collections.Generic;
 using System.Runtime.CompilerServices;
@@ -292,6 +293,7 @@
 
     protected virtual void OnHurt(DamageEvent damage)
     {
+        Hooks.NPCHurt(ref damage);
         if (((this._state != 2) && (this._state != 7)) && (damage.attacker.character != null))
         {
             this.ExitCurrentState();
@@ -329,6 +331,7 @@
 
     protected void OnKilled(DamageEvent damage)
     {
+        Hooks.NPCKilled(ref damage);
         this.ExitCurrentState();
         this.EnterState_Dead();
         Facepunch.NetworkView networkView = base.networkView;

		 
		  
--- Vanilla\BlueprintDataBlock.cs	2014-06-18 23:47:30.737000000 +1000
+++ Magma\BlueprintDataBlock.cs	2014-06-19 00:42:24.692000000 +1000
@@ -1,4 +1,4 @@
-using Rust;
+using Magma;
 using RustProto;
 using System;
 using System.Collections.Generic;
@@ -252,23 +252,7 @@
 
     public virtual void UseItem(IBlueprintItem item)
     {
-        PlayerInventory inventory = item.inventory as PlayerInventory;
-        if (inventory != null)
-        {
-            if (inventory.BindBlueprint(this))
-            {
-                int count = 1;
-                if (item.Consume(ref count))
-                {
-                    inventory.RemoveItem(item.slot);
-                }
-                Notice.Popup(inventory.networkView.owner, "", "You can now craft: " + this.resultItem.name, 4f);
-            }
-            else
-            {
-                Notice.Popup(inventory.networkView.owner, "", "You already have this blueprint", 4f);
-            }
-        }
+        Hooks.BlueprintUse(item, this);
     }
 
     [Serializable]

	 
	 
--- Vanilla\chat.cs	2014-06-18 23:46:54.870000000 +1000
+++ Magma\chat.cs	2014-06-19 00:52:52.342000000 +1000
@@ -1,10 +1,9 @@
-using Facepunch.Utility;
+using Magma;
 using System;
-using UnityEngine;
 
 public class chat : ConsoleSystem
 {
-    [ConsoleSystem.Client, Admin, Help("Enable or disable chat displaying", "")]
+    [ConsoleSystem.Client, Help("Enable or disable chat displaying", ""), Admin]
     public static bool enabled = true;
     [Admin]
     public static bool serverlog = true;
@@ -12,26 +11,7 @@
     [User]
     public static void say(ref ConsoleSystem.Arg arg)
     {
-        if (enabled && arg.argUser.CanChat())
-        {
-            string str = arg.GetString(0, "text");
-            if (str.Length > 0x80)
-            {
-                str = str.Substring(0, 0x80);
-            }
-            string str2 = Facepunch.Utility.String.QuoteSafe(arg.argUser.user.Displayname);
-            string str3 = Facepunch.Utility.String.QuoteSafe(str);
-            if (serverlog)
-            {
-                Debug.Log("[CHAT] " + str2 + ":" + str3);
-            }
-            FeedbackLog.Start(FeedbackLog.TYPE.Chat);
-            FeedbackLog.Writer.Write(arg.argUser.userID);
-            FeedbackLog.Writer.Write(str);
-            FeedbackLog.End(FeedbackLog.TYPE.Chat);
-            ConsoleNetworker.Broadcast("chat.add " + str2 + " " + str3);
-            arg.argUser.NoteChatted();
-        }
+        Hooks.ChatReceived(ref arg);
     }
 }

 
 
 --- Vanilla\ConnectionAcceptor.cs	2014-06-18 23:46:01.968000000 +1000
+++ Magma\ConnectionAcceptor.cs	2014-06-19 00:56:33.737000000 +1000
@@ -1,3 +1,4 @@
+using Magma;
 using Rust.Steam;
 using System;
 using System.Collections.Generic;
@@ -22,14 +23,14 @@
 
     public bool IsConnected(ulong iSteamID)
     {
-        <IsConnected>c__AnonStorey61 storey = new <IsConnected>c__AnonStorey61();
+        <IsConnected>c__AnonStorey60 storey = new <IsConnected>c__AnonStorey60();
         storey.iSteamID = iSteamID;
         return Enumerable.Any<ClientConnection>(this.m_Connections, new Func<ClientConnection, bool>(storey.<>m__10));
     }
 
     public static void OnSteamAuthorization(ulong userID, string status)
     {
-        <OnSteamAuthorization>c__AnonStorey63 storey = new <OnSteamAuthorization>c__AnonStorey63();
+        <OnSteamAuthorization>c__AnonStorey62 storey = new <OnSteamAuthorization>c__AnonStorey62();
         storey.userID = userID;
         if (Singleton != null)
         {
@@ -75,7 +76,7 @@
 
     public static void OnSteamOnUserGroup(ulong userID, ulong usergroupID, string status)
     {
-        <OnSteamOnUserGroup>c__AnonStorey62 storey = new <OnSteamOnUserGroup>c__AnonStorey62();
+        <OnSteamOnUserGroup>c__AnonStorey61 storey = new <OnSteamOnUserGroup>c__AnonStorey61();
         storey.userID = userID;
         if (Singleton != null)
         {
@@ -166,6 +167,7 @@
                 }
                 NetCull.DestroyPlayerObjects(player);
                 CullGrid.ClearPlayerCulling(user);
+                Hooks.PlayerDisconnect(user);
                 NetCull.RemoveRPCs(player);
             }
             catch (Exception exception)
@@ -196,7 +198,7 @@
     }
 
     [CompilerGenerated]
-    private sealed class <IsConnected>c__AnonStorey61
+    private sealed class <IsConnected>c__AnonStorey60
     {
         internal ulong iSteamID;
 
@@ -207,7 +209,7 @@
     }
 
     [CompilerGenerated]
-    private sealed class <OnSteamAuthorization>c__AnonStorey63
+    private sealed class <OnSteamAuthorization>c__AnonStorey62
     {
         internal ulong userID;
 
@@ -218,7 +220,7 @@
     }
 
     [CompilerGenerated]
-    private sealed class <OnSteamOnUserGroup>c__AnonStorey62
+    private sealed class <OnSteamOnUserGroup>c__AnonStorey61
     {
         internal ulong userID;
 

 
 --- Vanilla\ConsoleSystem.cs	2014-06-18 23:45:26.488000000 +1000
+++ Magma\ConsoleSystem.cs	2014-06-19 00:59:06.470000000 +1000
@@ -1,9 +1,11 @@
 using Facepunch.Util;
 using Facepunch.Utility;
+using Magma;
 using System;
 using System.Collections.Generic;
 using System.Reflection;
 using System.Runtime.InteropServices;
+using System.Text;
 using UnityEngine;
 
 public class ConsoleSystem
@@ -246,11 +248,7 @@
         System.Type[] typeArray = FindTypes(arg.Class);
         if (typeArray.Length == 0)
         {
-            if (bWantReply)
-            {
-                arg.ReplyWith("Console class not found: " + arg.Class);
-            }
-            return false;
+            return (bWantReply && Hooks.ConsoleReceived(ref arg));
         }
         if (bWantReply)
         {
@@ -271,7 +269,16 @@
                 }
                 Arg[] argArray1 = new Arg[] { arg };
                 object[] parameters = argArray1;
-                method.Invoke(null, parameters);
+                try
+                {
+                    method.Invoke(null, parameters);
+                }
+                catch (Exception exception)
+                {
+                    Debug.LogWarning("Error: " + arg.Class + "." + arg.Function + " - " + exception.Message);
+                    arg.ReplyWith("Error: " + arg.Class + "." + arg.Function + " - " + exception.Message);
+                    return false;
+                }
                 arg = parameters[0] as Arg;
                 return true;
             }
@@ -465,6 +472,7 @@
 
         public Arg(string rconCommand)
         {
+            rconCommand = RemoveInvalidCharacters(rconCommand);
             if ((rconCommand.IndexOf('.') <= 0) || (rconCommand.IndexOf(' ', 0, rconCommand.IndexOf('.')) != -1))
             {
                 rconCommand = "global." + rconCommand;
@@ -597,6 +605,24 @@
             return this.argUser.playerClient;
         }
 
+        private static string RemoveInvalidCharacters(string str)
+        {
+            if (str == null)
+            {
+                return null;
+            }
+            StringBuilder builder = new StringBuilder();
+            for (int i = 0; i < str.Length; i++)
+            {
+                char c = str[i];
+                if ((char.IsLetterOrDigit(c) || char.IsPunctuation(c)) || (char.IsSeparator(c) || char.IsSymbol(c)))
+                {
+                    builder.Append(c);
+                }
+            }
+            return builder.ToString();
+        }
+
         public void ReplyWith(string strValue)
         {
             this.Reply = strValue;
--- Vanilla\DatablockDictionary.cs	2014-06-18 23:47:38.488000000 +1000
+++ Magma\DatablockDictionary.cs	2014-06-19 01:02:09.701000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch;
+using Magma;
 using System;
 using System.Collections.Generic;
 using UnityEngine;
@@ -71,23 +72,21 @@
         _dataBlocks = new Dictionary<string, int>();
         _dataBlocksByUniqueID = new Dictionary<int, int>();
         _lootSpawnLists = new Dictionary<string, LootSpawnList>();
-        System.Collections.Generic.List<ItemDataBlock> list = new System.Collections.Generic.List<ItemDataBlock>();
+        System.Collections.Generic.List<ItemDataBlock> items = new System.Collections.Generic.List<ItemDataBlock>();
         HashSet<ItemDataBlock> set = new HashSet<ItemDataBlock>();
         foreach (ItemDataBlock block in Bundling.LoadAll<ItemDataBlock>())
         {
             if (set.Add(block))
             {
-                int count = list.Count;
-                _dataBlocks.Add(block.name, count);
-                _dataBlocksByUniqueID.Add(block.uniqueID, count);
-                list.Add(block);
+                items.Add(block);
             }
         }
-        _all = list.ToArray();
+        _all = Hooks.ItemsLoaded(items, _dataBlocks, _dataBlocksByUniqueID);
         foreach (LootSpawnList list2 in Bundling.LoadAll<LootSpawnList>())
         {
             _lootSpawnLists.Add(list2.name, list2);
         }
+        _lootSpawnLists = Hooks.TablesLoaded(_lootSpawnLists);
         initializedAtLeastOnce = true;
     }
 
--- Vanilla\DeployableItemDataBlock.cs	2014-06-18 23:47:33.212000000 +1000
+++ Magma\DeployableItemDataBlock.cs	2014-06-19 01:03:20.006000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch.MeshBatch;
+using Magma;
 using Rust;
 using RustProto;
 using System;
@@ -244,6 +245,7 @@
                     {
                         component.SetupCreator(item.controllable);
                         this.SetupDeployableObject(stream, rep, ref info, component, carrier);
+                        Hooks.EntityDeployed(component);
                     }
                     finally
                     {
--- Vanilla\DeployableObject.cs	2014-06-18 23:47:54.756000000 +1000
+++ Magma\DeployableObject.cs	2014-06-19 01:03:58.586000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch.MeshBatch;
+using Magma;
 using RustProto;
 using RustProto.Helpers;
 using System;
@@ -45,16 +46,7 @@
 
     public bool BelongsTo(Controllable controllable)
     {
-        if (controllable == null)
-        {
-            return false;
-        }
-        PlayerClient playerClient = controllable.playerClient;
-        if (playerClient == null)
-        {
-            return false;
-        }
-        return (playerClient.userID == this.ownerID);
+        return Hooks.CheckOwner(this, controllable);
     }
 
     public void CacheCreator()
@@ -167,7 +159,7 @@
 
     public void OnHurt(DamageEvent damage)
     {
-        this.UpdateClientHealth();
+        Hooks.EntityHurt(this, ref damage);
     }
 
     public void OnKilled()
--- Vanilla\EnvDecay.cs	2014-06-18 23:47:11.452000000 +1000
+++ Magma\EnvDecay.cs	2014-06-19 01:13:40.843000000 +1000
@@ -1,5 +1,6 @@
 using Facepunch.Collections;
 using Facepunch.MeshBatch;
+using Magma;
 using Rust;
 using System;
 using System.Runtime.InteropServices;
@@ -60,8 +61,9 @@
             }
             if (this.CanApplyDecayDamage())
             {
-                float damageQuantity = ((Mathf.Clamp(Time.time - this.lastDecayThink, 0f, decay.decaytickrate) / decay.deploy_maxhealth_sec) * this._takeDamage.maxHealth) * this.decayMultiplier;
-                if (TakeDamage.HurtSelf(this, damageQuantity, null) == LifeStatus.WasKilled)
+                float dmg = ((Mathf.Clamp(Time.time - this.lastDecayThink, 0f, decay.decaytickrate) / decay.deploy_maxhealth_sec) * this._takeDamage.maxHealth) * this.decayMultiplier;
+                dmg = Hooks.EntityDecay(this._deployable, dmg);
+                if (TakeDamage.HurtSelf(this, dmg, null) == LifeStatus.WasKilled)
                 {
                     return ThinkResult.Done;
                 }
--- Vanilla\HostileWildlifeAI.cs	2014-06-18 23:47:04.241000000 +1000
+++ Magma\HostileWildlifeAI.cs	2014-06-19 01:14:55.036000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch.Procedural;
+using Magma;
 using System;
 using uLink;
 using UnityEngine;
@@ -129,6 +130,7 @@
 
     protected override void OnHurt(DamageEvent damage)
     {
+        Hooks.NPCHurt(ref damage);
         if (!this.HasTarget() && (damage.attacker.character != null))
         {
             this.SetAttackTarget(damage.attacker.character.gameObject.GetComponent<TakeDamage>());
--- Vanilla\HumanBodyTakeDamage.cs	2014-06-18 23:47:12.031000000 +1000
+++ Magma\HumanBodyTakeDamage.cs	2014-06-19 01:16:04.204000000 +1000
@@ -1,3 +1,4 @@
+using Magma;
 using RustProto;
 using System;
 using UnityEngine;
@@ -124,6 +125,7 @@
 
     protected override LifeStatus Hurt(ref DamageEvent damage)
     {
+        Hooks.PlayerHurt(ref damage);
         if (!server.pvp)
         {
             PlayerClient exclude = damage.victim.client;
--- Vanilla\HumanController.cs	2014-06-18 23:45:00.055000000 +1000
+++ Magma\HumanController.cs	2014-06-19 01:16:46.199000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch.Cursor;
+using Magma;
 using System;
 using System.Runtime.InteropServices;
 using uLink;
@@ -284,7 +285,6 @@
 
     private void OnKilled(DamageEvent damage)
     {
-        Inventory inventory;
         Vis.Mask traitMask = base.traitMask;
         traitMask[Vis.Life.Alive] = false;
         traitMask[Vis.Life.Dead] = true;
@@ -293,13 +293,17 @@
         {
             this.deathTransfer.NetworkKill(ref damage);
         }
-        DropHelper.DropInventoryContents(this.inventory, out inventory);
-        if ((inventory != null) && (player.backpackLockTime > 0f))
-        {
-            TimedLockable lockable = inventory.gameObject.AddComponent<TimedLockable>();
-            lockable.SetOwner(base.netUser.userID);
-            lockable.LockFor(player.backpackLockTime);
-        }
+        if (Hooks.PlayerKilled(ref damage))
+        {
+            Inventory inventory;
+            DropHelper.DropInventoryContents(this.inventory, out inventory);
+            if ((inventory != null) && (player.backpackLockTime > 0f))
+            {
+                TimedLockable lockable = inventory.gameObject.AddComponent<TimedLockable>();
+                lockable.SetOwner(base.netUser.userID);
+                lockable.LockFor(player.backpackLockTime);
+            }
+        }
         base.GetComponent<AvatarSaveRestore>().ClearAvatar();
         IDLocalCharacter.DestroyCharacter(base.idMain);
     }
--- Vanilla\LibRust.cs	2014-06-18 23:45:36.277000000 +1000
+++ Magma\LibRust.cs	2014-06-19 01:17:18.611000000 +1000
@@ -1,3 +1,4 @@
+using Magma;
 using System;
 using System.Runtime.InteropServices;
 using UnityEngine;
@@ -38,6 +39,7 @@
         if (Application.isPlaying)
         {
             Debug.Log("OnDestroy");
+            Hooks.ServerShutdown();
             Shutdown();
         }
     }
--- Vanilla\MeleeWeaponDataBlock.cs	2014-06-18 23:47:35.019000000 +1000
+++ Magma\MeleeWeaponDataBlock.cs	2014-06-19 01:17:44.743000000 +1000
@@ -1,3 +1,4 @@
+using Magma;
 using Rust;
 using RustProto;
 using System;
@@ -82,8 +83,8 @@
                         component.SubtractCalories(UnityEngine.Random.Range((float) (this.caloriesPerSwing * 0.8f), (float) (this.caloriesPerSwing * 1.2f)));
                     }
                     rep.ActionStream(1, uLink.RPCMode.AllExceptOwner, stream);
-                    ResourceTarget target = ((victim != null) || (gameObject != null)) ? ((victim != null) ? victim.gameObject : gameObject).GetComponent<ResourceTarget>() : null;
-                    if (flag2 || ((target != null) && ((damage2 == null) || damage2.dead)))
+                    ResourceTarget rt = ((victim != null) || (gameObject != null)) ? ((victim != null) ? victim.gameObject : gameObject).GetComponent<ResourceTarget>() : null;
+                    if (flag2 || ((rt != null) && ((damage2 == null) || damage2.dead)))
                     {
                         ResourceTarget.ResourceTargetType staticTree;
                         if (flag2)
@@ -92,7 +93,7 @@
                         }
                         else
                         {
-                            staticTree = target.type;
+                            staticTree = rt.type;
                         }
                         float efficiency = this.efficiencies[(int) staticTree];
                         if (flag2)
@@ -104,6 +105,7 @@
                                 int amount = Mathf.FloorToInt(this.resourceGatherLevel);
                                 string name = "Wood";
                                 ItemDataBlock byName = DatablockDictionary.GetByName(name);
+                                Hooks.PlayerGatherWood(item, rt, ref byName, ref amount, ref name);
                                 if (byName != null)
                                 {
                                     int num5 = item.inventory.AddItemAmount(byName, amount);
@@ -120,9 +122,9 @@
                                 }
                             }
                         }
-                        else if (target != null)
+                        else if (rt != null)
                         {
-                            target.DoGather(item.inventory, efficiency);
+                            rt.DoGather(item.inventory, efficiency);
                         }
                     }
                     if (victim != null)
--- Vanilla\ResourceTarget.cs	2014-06-18 23:47:16.009000000 +1000
+++ Magma\ResourceTarget.cs	2014-06-19 01:18:42.080000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch;
+using Magma;
 using Rust;
 using System;
 using System.Collections.Generic;
@@ -27,20 +28,20 @@
         {
             return false;
         }
-        ResourceGivePair item = this.resourcesAvailable[UnityEngine.Random.Range(0, this.resourcesAvailable.Count)];
+        ResourceGivePair rg = this.resourcesAvailable[UnityEngine.Random.Range(0, this.resourcesAvailable.Count)];
         this.gatherProgress += efficiency * this.gatherEfficiencyMultiplier;
-        int a = (int) Mathf.Abs(this.gatherProgress);
-        this.gatherProgress = Mathf.Clamp(this.gatherProgress, 0f, (float) a);
-        a = Mathf.Min(a, item.AmountLeft());
-        if (a > 0)
+        int amount = (int) Mathf.Abs(this.gatherProgress);
+        Hooks.PlayerGather(reciever, this, rg, ref amount);
+        this.gatherProgress = Mathf.Clamp(this.gatherProgress, 0f, (float) amount);
+        if (amount > 0)
         {
-            int num2 = reciever.AddItemAmount(item.ResourceItemDataBlock, a);
-            if (num2 < a)
+            int num2 = reciever.AddItemAmount(rg.ResourceItemDataBlock, amount);
+            if (num2 < amount)
             {
-                int amount = a - num2;
-                item.Subtract(amount);
-                this.gatherProgress -= amount;
-                Notice.Inventory(reciever.networkView.owner, amount.ToString() + " x " + item.ResourceItemName);
+                int num3 = amount - num2;
+                rg.Subtract(num3);
+                this.gatherProgress -= num3;
+                Notice.Inventory(reciever.networkView.owner, num3.ToString() + " x " + rg.ResourceItemName);
                 base.SendMessage("ResourcesGathered", SendMessageOptions.DontRequireReceiver);
             }
             else
@@ -48,9 +49,9 @@
                 Notice.Popup(reciever.networkView.owner, "", "Inventory full, can't gather.", 4f);
             }
         }
-        if (!item.AnyLeft())
+        if (!rg.AnyLeft())
         {
-            this.resourcesAvailable.Remove(item);
+            this.resourcesAvailable.Remove(rg);
         }
         if (this.resourcesAvailable.Count == 0)
         {
--- Vanilla\RustServerManagement.cs	2014-06-18 23:47:52.512000000 +1000
+++ Magma\RustServerManagement.cs	2014-06-19 01:19:16.256000000 +1000
@@ -1,3 +1,4 @@
+using Magma;
 using POSIX;
 using Rust;
 using Rust.Steam;
@@ -123,9 +124,12 @@
 
     public override void OnUserConnected(NetUser User)
     {
-        base.OnUserConnected(User);
-        this.UpdateModdedStatus();
-    }
+        if (Hooks.PlayerConnect(User))
+        {
+            base.OnUserConnected(User);
+            this.UpdateModdedStatus();
+        }
+    }
 
     public override void RemovePlayerSpawn(GameObject spawn)
     {
--- Vanilla\ServerInit.cs	2014-06-18 23:47:52.975000000 +1000
+++ Magma\ServerInit.cs	2014-06-19 01:20:07.315000000 +1000
@@ -1,5 +1,6 @@
 using Facepunch;
 using Facepunch.Utility;
+using Magma;
 using Rust.Steam;
 using System;
 using System.Collections;
@@ -63,6 +64,7 @@
         BanList.Load();
         ConsoleSystem.Run("config.load", false);
         UnityEngine.Object.DontDestroyOnLoad(base.gameObject);
+        Bootstrap.AttachBootstrap();
         NetCull.config.batchSendAtEndOfFrame = false;
         ServerRuntime.TargetFrameRate = server.framerate;
         NetCull.config.timeoutDelay = server.clienttimeout;
@@ -73,19 +75,19 @@
     [DebuggerHidden]
     private IEnumerator LoadLevel(string levelName)
     {
-        <LoadLevel>c__Iterator4F iteratorf = new <LoadLevel>c__Iterator4F();
-        iteratorf.levelName = levelName;
-        iteratorf.<$>levelName = levelName;
-        iteratorf.<>f__this = this;
-        return iteratorf;
+        <LoadLevel>c__Iterator4E iteratore = new <LoadLevel>c__Iterator4E();
+        iteratore.levelName = levelName;
+        iteratore.<$>levelName = levelName;
+        iteratore.<>f__this = this;
+        return iteratore;
     }
 
     [DebuggerHidden]
     private IEnumerator StartServerProc()
     {
-        <StartServerProc>c__Iterator4E iteratore = new <StartServerProc>c__Iterator4E();
-        iteratore.<>f__this = this;
-        return iteratore;
+        <StartServerProc>c__Iterator4D iteratord = new <StartServerProc>c__Iterator4D();
+        iteratord.<>f__this = this;
+        return iteratord;
     }
 
     private void uLink_OnServerInitialized()
@@ -106,7 +108,7 @@
     }
 
     [CompilerGenerated]
-    private sealed class <LoadLevel>c__Iterator4F : IDisposable, IEnumerator, IEnumerator<object>
+    private sealed class <LoadLevel>c__Iterator4E : IDisposable, IEnumerator, IEnumerator<object>
     {
         internal object $current;
         internal int $PC;
@@ -166,7 +168,7 @@
     }
 
     [CompilerGenerated]
-    private sealed class <StartServerProc>c__Iterator4E : IDisposable, IEnumerator, IEnumerator<object>
+    private sealed class <StartServerProc>c__Iterator4D : IDisposable, IEnumerator, IEnumerator<object>
     {
         internal object $current;
         internal int $PC;
--- Vanilla\ServerManagement.cs	2014-06-18 23:46:32.782000000 +1000
+++ Magma\ServerManagement.cs	2014-06-19 01:20:21.970000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch;
+using Magma;
 using RustProto;
 using System;
 using System.Collections;
@@ -119,7 +120,7 @@
     [DebuggerHidden, Obsolete("You should be using PlayerClient.FindAllWithName")]
     internal IEnumerable<PlayerClient> FindPlayerClientsByName(string name, StringComparison comparison)
     {
-        <FindPlayerClientsByName>c__Iterator39 iterator = new <FindPlayerClientsByName>c__Iterator39();
+        <FindPlayerClientsByName>c__Iterator38 iterator = new <FindPlayerClientsByName>c__Iterator38();
         iterator.name = name;
         iterator.comparison = comparison;
         iterator.<$>name = name;
@@ -129,10 +130,10 @@
         return iterator;
     }
 
-    [Obsolete("You should be using PlayerClient.FindAllWithString"), DebuggerHidden]
+    [DebuggerHidden, Obsolete("You should be using PlayerClient.FindAllWithString")]
     internal IEnumerable<PlayerClient> FindPlayerClientsByString(string name)
     {
-        <FindPlayerClientsByString>c__Iterator38 iterator = new <FindPlayerClientsByString>c__Iterator38();
+        <FindPlayerClientsByString>c__Iterator37 iterator = new <FindPlayerClientsByString>c__Iterator37();
         iterator.name = name;
         iterator.<$>name = name;
         iterator.<>f__this = this;
@@ -159,23 +160,23 @@
     [DebuggerHidden]
     public static IEnumerable<uLink.NetworkPlayer> GetNetworkPlayersByName(string name, StringComparison comparison)
     {
-        <GetNetworkPlayersByName>c__Iterator3A iteratora = new <GetNetworkPlayersByName>c__Iterator3A();
-        iteratora.name = name;
-        iteratora.comparison = comparison;
-        iteratora.<$>name = name;
-        iteratora.<$>comparison = comparison;
-        iteratora.$PC = -2;
-        return iteratora;
+        <GetNetworkPlayersByName>c__Iterator39 iterator = new <GetNetworkPlayersByName>c__Iterator39();
+        iterator.name = name;
+        iterator.comparison = comparison;
+        iterator.<$>name = name;
+        iterator.<$>comparison = comparison;
+        iterator.$PC = -2;
+        return iterator;
     }
 
     [DebuggerHidden]
     public static IEnumerable<uLink.NetworkPlayer> GetNetworkPlayersByString(string partialNameOrIntID)
     {
-        <GetNetworkPlayersByString>c__Iterator3B iteratorb = new <GetNetworkPlayersByString>c__Iterator3B();
-        iteratorb.partialNameOrIntID = partialNameOrIntID;
-        iteratorb.<$>partialNameOrIntID = partialNameOrIntID;
-        iteratorb.$PC = -2;
-        return iteratorb;
+        <GetNetworkPlayersByString>c__Iterator3A iteratora = new <GetNetworkPlayersByString>c__Iterator3A();
+        iteratora.partialNameOrIntID = partialNameOrIntID;
+        iteratora.<$>partialNameOrIntID = partialNameOrIntID;
+        iteratora.$PC = -2;
+        return iteratora;
     }
 
     public uLink.RPCMode GetNetworkPlayersInGroup(string group)
@@ -254,7 +255,6 @@
 
     public void LocalClientPoliteReady()
     {
-        UnityEngine.Debug.Log("LocalClientPoliteReady rpcing...");
         base.networkView.RPC("ClientFirstReady", uLink.RPCMode.Server, new object[0]);
     }
 
@@ -415,12 +415,14 @@
             UnityEngine.Debug.LogWarning("No NetUser for client", playerFor);
         }
         user.truthDetector.NoteTeleported(zero, 0.0);
+        zero = Hooks.PlayerSpawning(playerFor, zero, useCamp);
         Character forCharacter = Character.SummonCharacter(user.networkPlayer, this.defaultPlayerControllableKey, zero, identity);
         if (forCharacter != null)
         {
             this.LoadAvatar(forCharacter);
             playerFor.lastKnownPosition = forCharacter.eyesOrigin;
             playerFor.hasLastKnownPosition = true;
+            Hooks.PlayerSpawned(playerFor, zero, useCamp);
         }
         return forCharacter;
     }
@@ -439,13 +441,13 @@
     }
 
     [CompilerGenerated]
-    private sealed class <FindPlayerClientsByName>c__Iterator39 : IDisposable, IEnumerator, IEnumerable, IEnumerable<PlayerClient>, IEnumerator<PlayerClient>
+    private sealed class <FindPlayerClientsByName>c__Iterator38 : IDisposable, IEnumerator, IEnumerable, IEnumerable<PlayerClient>, IEnumerator<PlayerClient>
     {
         internal PlayerClient $current;
         internal int $PC;
         internal StringComparison <$>comparison;
         internal string <$>name;
-        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_359>__0;
+        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_352>__0;
         internal ServerManagement <>f__this;
         internal PlayerClient <client>__1;
         internal StringComparison comparison;
@@ -464,7 +466,7 @@
                     }
                     finally
                     {
-                        this.<$s_359>__0.Dispose();
+                        this.<$s_352>__0.Dispose();
                     }
                     break;
             }
@@ -478,7 +480,7 @@
             switch (num)
             {
                 case 0:
-                    this.<$s_359>__0 = this.<>f__this._playerClientList.GetEnumerator();
+                    this.<$s_352>__0 = this.<>f__this._playerClientList.GetEnumerator();
                     num = 0xfffffffd;
                     break;
 
@@ -490,9 +492,9 @@
             }
             try
             {
-                while (this.<$s_359>__0.MoveNext())
+                while (this.<$s_352>__0.MoveNext())
                 {
-                    this.<client>__1 = this.<$s_359>__0.Current;
+                    this.<client>__1 = this.<$s_352>__0.Current;
                     if (string.Equals(this.<client>__1.userName, this.name, this.comparison))
                     {
                         this.$current = this.<client>__1;
@@ -507,7 +509,7 @@
                 if (!flag)
                 {
                 }
-                this.<$s_359>__0.Dispose();
+                this.<$s_352>__0.Dispose();
             }
             this.$PC = -1;
         Label_00CF:
@@ -527,7 +529,7 @@
             {
                 return this;
             }
-            ServerManagement.<FindPlayerClientsByName>c__Iterator39 iterator = new ServerManagement.<FindPlayerClientsByName>c__Iterator39();
+            ServerManagement.<FindPlayerClientsByName>c__Iterator38 iterator = new ServerManagement.<FindPlayerClientsByName>c__Iterator38();
             iterator.<>f__this = this.<>f__this;
             iterator.name = this.<$>name;
             iterator.comparison = this.<$>comparison;
@@ -560,14 +562,14 @@
     }
 
     [CompilerGenerated]
-    private sealed class <FindPlayerClientsByString>c__Iterator38 : IDisposable, IEnumerator, IEnumerable, IEnumerable<PlayerClient>, IEnumerator<PlayerClient>
+    private sealed class <FindPlayerClientsByString>c__Iterator37 : IDisposable, IEnumerator, IEnumerable, IEnumerable<PlayerClient>, IEnumerator<PlayerClient>
     {
         internal PlayerClient $current;
         internal int $PC;
         internal string <$>name;
-        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_356>__2;
-        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_357>__4;
-        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_358>__6;
+        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_349>__2;
+        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_350>__4;
+        internal System.Collections.Generic.List<PlayerClient>.Enumerator <$s_351>__6;
         internal ServerManagement <>f__this;
         internal PlayerClient <client>__3;
         internal PlayerClient <client>__5;
@@ -589,7 +591,7 @@
                     }
                     finally
                     {
-                        this.<$s_356>__2.Dispose();
+                        this.<$s_349>__2.Dispose();
                     }
                     break;
 
@@ -599,7 +601,7 @@
                     }
                     finally
                     {
-                        this.<$s_357>__4.Dispose();
+                        this.<$s_350>__4.Dispose();
                     }
                     break;
 
@@ -609,7 +611,7 @@
                     }
                     finally
                     {
-                        this.<$s_358>__6.Dispose();
+                        this.<$s_351>__6.Dispose();
                     }
                     break;
             }
@@ -629,7 +631,7 @@
                     {
                         goto Label_0109;
                     }
-                    this.<$s_356>__2 = this.<>f__this._playerClientList.GetEnumerator();
+                    this.<$s_349>__2 = this.<>f__this._playerClientList.GetEnumerator();
                     num = 0xfffffffd;
                     break;
 
@@ -653,9 +655,9 @@
                         this.<iFound>__0++;
                         goto Label_00F8;
                 }
-                while (this.<$s_356>__2.MoveNext())
+                while (this.<$s_349>__2.MoveNext())
                 {
-                    this.<client>__3 = this.<$s_356>__2.Current;
+                    this.<client>__3 = this.<$s_349>__2.Current;
                     if (this.<client>__3.userID == this.<iUserID>__1)
                     {
                         this.$current = this.<client>__3;
@@ -670,7 +672,7 @@
                 if (!flag)
                 {
                 }
-                this.<$s_356>__2.Dispose();
+                this.<$s_349>__2.Dispose();
             }
         Label_00F8:
             if (this.<iFound>__0 > 0)
@@ -678,7 +680,7 @@
                 goto Label_026A;
             }
         Label_0109:
-            this.<$s_357>__4 = this.<>f__this._playerClientList.GetEnumerator();
+            this.<$s_350>__4 = this.<>f__this._playerClientList.GetEnumerator();
             num = 0xfffffffd;
         Label_0122:
             try
@@ -689,9 +691,9 @@
                         this.<iFound>__0++;
                         break;
                 }
-                while (this.<$s_357>__4.MoveNext())
+                while (this.<$s_350>__4.MoveNext())
                 {
-                    this.<client>__5 = this.<$s_357>__4.Current;
+                    this.<client>__5 = this.<$s_350>__4.Current;
                     if (string.Equals(this.<client>__5.userName, this.name, StringComparison.InvariantCultureIgnoreCase))
                     {
                         this.$current = this.<client>__5;
@@ -706,20 +708,20 @@
                 if (!flag)
                 {
                 }
-                this.<$s_357>__4.Dispose();
+                this.<$s_350>__4.Dispose();
             }
             if (this.<iFound>__0 > 0)
             {
                 goto Label_026A;
             }
-            this.<$s_358>__6 = this.<>f__this._playerClientList.GetEnumerator();
+            this.<$s_351>__6 = this.<>f__this._playerClientList.GetEnumerator();
             num = 0xfffffffd;
         Label_01E1:
             try
             {
-                while (this.<$s_358>__6.MoveNext())
+                while (this.<$s_351>__6.MoveNext())
                 {
-                    this.<client>__7 = this.<$s_358>__6.Current;
+                    this.<client>__7 = this.<$s_351>__6.Current;
                     if (this.<client>__7.userName.StartsWith(this.name, StringComparison.InvariantCultureIgnoreCase))
                     {
                         this.$current = this.<client>__7;
@@ -734,7 +736,7 @@
                 if (!flag)
                 {
                 }
-                this.<$s_358>__6.Dispose();
+                this.<$s_351>__6.Dispose();
             }
             this.$PC = -1;
         Label_026A:
@@ -756,7 +758,7 @@
             {
                 return this;
             }
-            ServerManagement.<FindPlayerClientsByString>c__Iterator38 iterator = new ServerManagement.<FindPlayerClientsByString>c__Iterator38();
+            ServerManagement.<FindPlayerClientsByString>c__Iterator37 iterator = new ServerManagement.<FindPlayerClientsByString>c__Iterator37();
             iterator.<>f__this = this.<>f__this;
             iterator.name = this.<$>name;
             return iterator;
@@ -788,13 +790,13 @@
     }
 
     [CompilerGenerated]
-    private sealed class <GetNetworkPlayersByName>c__Iterator3A : IDisposable, IEnumerator, IEnumerable, IEnumerable<uLink.NetworkPlayer>, IEnumerator<uLink.NetworkPlayer>
+    private sealed class <GetNetworkPlayersByName>c__Iterator39 : IDisposable, IEnumerator, IEnumerable, IEnumerable<uLink.NetworkPlayer>, IEnumerator<uLink.NetworkPlayer>
     {
         internal uLink.NetworkPlayer $current;
         internal int $PC;
         internal StringComparison <$>comparison;
         internal string <$>name;
-        internal IEnumerator<PlayerClient> <$s_360>__1;
+        internal IEnumerator<PlayerClient> <$s_353>__1;
         internal PlayerClient <pc>__2;
         internal ServerManagement <svm>__0;
         internal StringComparison comparison;
@@ -813,10 +815,10 @@
                     }
                     finally
                     {
-                        if (this.<$s_360>__1 == null)
+                        if (this.<$s_353>__1 == null)
                         {
                         }
-                        this.<$s_360>__1.Dispose();
+                        this.<$s_353>__1.Dispose();
                     }
                     break;
             }
@@ -835,7 +837,7 @@
                     {
                         goto Label_00D2;
                     }
-                    this.<$s_360>__1 = this.<svm>__0.FindPlayerClientsByName(this.name, this.comparison).GetEnumerator();
+                    this.<$s_353>__1 = this.<svm>__0.FindPlayerClientsByName(this.name, this.comparison).GetEnumerator();
                     num = 0xfffffffd;
                     break;
 
@@ -847,9 +849,9 @@
             }
             try
             {
-                while (this.<$s_360>__1.MoveNext())
+                while (this.<$s_353>__1.MoveNext())
                 {
-                    this.<pc>__2 = this.<$s_360>__1.Current;
+                    this.<pc>__2 = this.<$s_353>__1.Current;
                     this.$current = this.<pc>__2.netPlayer;
                     this.$PC = 1;
                     flag = true;
@@ -861,10 +863,10 @@
                 if (!flag)
                 {
                 }
-                if (this.<$s_360>__1 == null)
+                if (this.<$s_353>__1 == null)
                 {
                 }
-                this.<$s_360>__1.Dispose();
+                this.<$s_353>__1.Dispose();
             }
         Label_00D2:
             this.$PC = -1;
@@ -885,10 +887,10 @@
             {
                 return this;
             }
-            ServerManagement.<GetNetworkPlayersByName>c__Iterator3A iteratora = new ServerManagement.<GetNetworkPlayersByName>c__Iterator3A();
-            iteratora.name = this.<$>name;
-            iteratora.comparison = this.<$>comparison;
-            return iteratora;
+            ServerManagement.<GetNetworkPlayersByName>c__Iterator39 iterator = new ServerManagement.<GetNetworkPlayersByName>c__Iterator39();
+            iterator.name = this.<$>name;
+            iterator.comparison = this.<$>comparison;
+            return iterator;
         }
 
         [DebuggerHidden]
@@ -917,12 +919,12 @@
     }
 
     [CompilerGenerated]
-    private sealed class <GetNetworkPlayersByString>c__Iterator3B : IDisposable, IEnumerator, IEnumerable, IEnumerable<uLink.NetworkPlayer>, IEnumerator<uLink.NetworkPlayer>
+    private sealed class <GetNetworkPlayersByString>c__Iterator3A : IDisposable, IEnumerator, IEnumerable, IEnumerable<uLink.NetworkPlayer>, IEnumerator<uLink.NetworkPlayer>
     {
         internal uLink.NetworkPlayer $current;
         internal int $PC;
         internal string <$>partialNameOrIntID;
-        internal IEnumerator<PlayerClient> <$s_361>__1;
+        internal IEnumerator<PlayerClient> <$s_354>__1;
         internal PlayerClient <pc>__2;
         internal ServerManagement <svm>__0;
         internal string partialNameOrIntID;
@@ -940,10 +942,10 @@
                     }
                     finally
                     {
-                        if (this.<$s_361>__1 == null)
+                        if (this.<$s_354>__1 == null)
                         {
                         }
-                        this.<$s_361>__1.Dispose();
+                        this.<$s_354>__1.Dispose();
                     }
                     break;
             }
@@ -962,7 +964,7 @@
                     {
                         goto Label_00CC;
                     }
-                    this.<$s_361>__1 = this.<svm>__0.FindPlayerClientsByString(this.partialNameOrIntID).GetEnumerator();
+                    this.<$s_354>__1 = this.<svm>__0.FindPlayerClientsByString(this.partialNameOrIntID).GetEnumerator();
                     num = 0xfffffffd;
                     break;
 
@@ -974,9 +976,9 @@
             }
             try
             {
-                while (this.<$s_361>__1.MoveNext())
+                while (this.<$s_354>__1.MoveNext())
                 {
-                    this.<pc>__2 = this.<$s_361>__1.Current;
+                    this.<pc>__2 = this.<$s_354>__1.Current;
                     this.$current = this.<pc>__2.netPlayer;
                     this.$PC = 1;
                     flag = true;
@@ -988,10 +990,10 @@
                 if (!flag)
                 {
                 }
-                if (this.<$s_361>__1 == null)
+                if (this.<$s_354>__1 == null)
                 {
                 }
-                this.<$s_361>__1.Dispose();
+                this.<$s_354>__1.Dispose();
             }
         Label_00CC:
             this.$PC = -1;
@@ -1012,9 +1014,9 @@
             {
                 return this;
             }
-            ServerManagement.<GetNetworkPlayersByString>c__Iterator3B iteratorb = new ServerManagement.<GetNetworkPlayersByString>c__Iterator3B();
-            iteratorb.partialNameOrIntID = this.<$>partialNameOrIntID;
-            return iteratorb;
+            ServerManagement.<GetNetworkPlayersByString>c__Iterator3A iteratora = new ServerManagement.<GetNetworkPlayersByString>c__Iterator3A();
+            iteratora.partialNameOrIntID = this.<$>partialNameOrIntID;
+            return iteratora;
         }
 
         [DebuggerHidden]
--- Vanilla\StructureComponent.cs	2014-06-18 23:48:02.747000000 +1000
+++ Magma\StructureComponent.cs	2014-06-19 01:21:22.380000000 +1000
@@ -1,3 +1,4 @@
+using Magma;
 using RustProto;
 using RustProto.Helpers;
 using System;
@@ -8,7 +9,7 @@
 using uLink;
 using UnityEngine;
 
-[NGCAutoAddScript, RequireComponent(typeof(TakeDamage))]
+[RequireComponent(typeof(TakeDamage)), NGCAutoAddScript]
 public class StructureComponent : IDMain, IServerSaveable
 {
     public StructureMaster _master;
@@ -179,7 +180,7 @@
     [DebuggerHidden]
     private IEnumerator DelayedKill()
     {
-        <DelayedKill>c__Iterator51 iterator = new <DelayedKill>c__Iterator51();
+        <DelayedKill>c__Iterator50 iterator = new <DelayedKill>c__Iterator50();
         iterator.<>f__this = this;
         return iterator;
     }
@@ -206,7 +207,7 @@
 
     public void OnHurt(DamageEvent damage)
     {
-        this.UpdateClientHealth();
+        Hooks.EntityHurt(this, ref damage);
     }
 
     public void OnKilled(DamageEvent e)
@@ -252,7 +253,7 @@
         }
     }
 
-    [Obsolete("Do not call manually", true), RPC]
+    [RPC, Obsolete("Do not call manually", true)]
     protected void SMSet(uLink.NetworkViewID masterViewID)
     {
     }
@@ -281,7 +282,7 @@
     }
 
     [CompilerGenerated]
-    private sealed class <DelayedKill>c__Iterator51 : IDisposable, IEnumerator, IEnumerator<object>
+    private sealed class <DelayedKill>c__Iterator50 : IDisposable, IEnumerator, IEnumerator<object>
     {
         internal object $current;
         internal int $PC;
--- Vanilla\StructureComponentDataBlock.cs	2014-06-18 23:47:36.673000000 +1000
+++ Magma\StructureComponentDataBlock.cs	2014-06-19 01:21:40.629000000 +1000
@@ -1,4 +1,5 @@
 using Facepunch;
+using Magma;
 using RustProto;
 using System;
 using uLink;
@@ -85,6 +86,7 @@
                 if (comp != null)
                 {
                     component.AddStructureComponent(comp);
+                    Hooks.EntityDeployed(comp);
                     int count = 1;
                     if (item.Consume(ref count))
                     {
--- Vanilla\StructureMaster.cs	2014-06-18 23:48:04.014000000 +1000
+++ Magma\StructureMaster.cs	2014-06-19 01:22:22.008000000 +1000
@@ -1,5 +1,6 @@
 using Facepunch.Collections;
 using Facepunch.MeshBatch;
+using Magma;
 using Rust;
 using RustProto;
 using RustProto.Helpers;
@@ -26,7 +27,7 @@
     private Bounds _localBounds;
     protected StructureMaterialType _materialType;
     private float _pentUpDecayTime;
-    protected HashSet<StructureComponent> _structureComponents;
+    public HashSet<StructureComponent> _structureComponents;
     protected Dictionary<StructureComponentKey, CompPosNode> _structureComponentsByPosition;
     protected Dictionary<StructureComponent, HashSet<StructureComponent>> _weightOnMe;
     [CompilerGenerated]
@@ -245,7 +246,7 @@
     [DebuggerHidden]
     private IEnumerator CheckNextFrameAnyComponents()
     {
-        <CheckNextFrameAnyComponents>c__Iterator52 iterator = new <CheckNextFrameAnyComponents>c__Iterator52();
+        <CheckNextFrameAnyComponents>c__Iterator51 iterator = new <CheckNextFrameAnyComponents>c__Iterator51();
         iterator.<>f__this = this;
         return iterator;
     }
@@ -285,23 +286,31 @@
 
     protected DecayStatus DoDecay()
     {
-        float num = Time.time - this._lastDecayTime;
+        float deltaTime;
+        if (this._lastDecayTime == 0f)
+        {
+            deltaTime = Time.deltaTime;
+        }
+        else
+        {
+            deltaTime = Time.time - this._lastDecayTime;
+        }
         this._lastDecayTime = Time.time;
         if (decayRate <= 0f)
         {
             return DecayStatus.Delaying;
         }
-        this._decayDelayRemaining -= num;
-        num = -this._decayDelayRemaining;
+        this._decayDelayRemaining -= deltaTime;
+        deltaTime = -this._decayDelayRemaining;
         if (this._decayDelayRemaining < 0f)
         {
             this._decayDelayRemaining = 0f;
         }
-        if (num <= 0f)
+        if (deltaTime <= 0f)
         {
             return DecayStatus.Delaying;
         }
-        this._pentUpDecayTime += num;
+        this._pentUpDecayTime += deltaTime;
         float decayTimeMaxHealth = this.GetDecayTimeMaxHealth();
         float num3 = this._pentUpDecayTime / decayTimeMaxHealth;
         if (num3 < structure.minpercentdmg)
@@ -314,7 +323,9 @@
             TakeDamage damage = component.GetComponent<TakeDamage>();
             if (damage != null)
             {
-                float damageQuantity = ((damage.maxHealth * num3) * UnityEngine.Random.Range((float) 0.75f, (float) 1.25f)) * decayRate;
+                float num4;
+                num4 = Hooks.EntityDecay(component, num4);
+                num4 = ((damage.maxHealth * num3) * UnityEngine.Random.Range((float) 0.75f, (float) 1.25f)) * decayRate;
                 if (((component.type == StructureComponent.StructureComponentType.Wall) || (component.type == StructureComponent.StructureComponentType.Doorway)) || (component.type == StructureComponent.StructureComponentType.WindowWall))
                 {
                     RaycastHit hit;
@@ -338,34 +349,34 @@
                     }
                     if (flag3)
                     {
-                        damageQuantity *= 0.2f;
+                        num4 *= 0.2f;
                     }
-                    TakeDamage.HurtSelf(component, damageQuantity, null);
+                    TakeDamage.HurtSelf(component, num4, null);
                 }
                 else if (component.type == StructureComponent.StructureComponentType.Pillar)
                 {
                     if (!this.ComponentCarryingWeight(component))
                     {
-                        TakeDamage.HurtSelf(component, damageQuantity, null);
+                        TakeDamage.HurtSelf(component, num4, null);
                     }
                 }
                 else if (component.type == StructureComponent.StructureComponentType.Ceiling)
                 {
                     if (!this.ComponentCarryingWeight(component))
                     {
-                        TakeDamage.HurtSelf(component, damageQuantity, null);
+                        TakeDamage.HurtSelf(component, num4, null);
                     }
                 }
                 else if (component.type == StructureComponent.StructureComponentType.Foundation)
                 {
                     if (!this.ComponentCarryingWeight(component))
                     {
-                        TakeDamage.HurtSelf(component, damageQuantity, null);
+                        TakeDamage.HurtSelf(component, num4, null);
                     }
                 }
                 else
                 {
-                    TakeDamage.HurtSelf(component, damageQuantity, null);
+                    TakeDamage.HurtSelf(component, num4, null);
                 }
             }
         }
@@ -983,7 +994,7 @@
     }
 
     [CompilerGenerated]
-    private sealed class <CheckNextFrameAnyComponents>c__Iterator52 : IDisposable, IEnumerator, IEnumerator<object>
+    private sealed class <CheckNextFrameAnyComponents>c__Iterator51 : IDisposable, IEnumerator, IEnumerator<object>
     {
         internal object $current;
         internal int $PC;
--- Vanilla\VoiceCom.cs	2014-06-18 23:45:01.011000000 +1000
+++ Magma\VoiceCom.cs	2014-06-19 01:25:28.734000000 +1000
@@ -1,3 +1,4 @@
+using Magma;
 using System;
 using System.Collections.Generic;
 using uLink;
@@ -35,6 +36,7 @@
                         if (num2 <= num)
                         {
                             num3++;
+                            Hooks.ShowTalker(client2.netPlayer, client);
                             playerList.Add(client2.netPlayer);
                         }
                     }
